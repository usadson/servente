// Copyright (C) 2023 Tristan Gerritsen <tristan@thewoosh.org>
// All Rights Reserved.

#![allow(dead_code)]

use servente_http::{
    Method,
    StatusCode,
};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
enum StaticMethod {
    Connect,
    Delete,
    Get,
    Head,
    Options,
    Post,
    Put,
}

impl From<StaticMethod> for Method {
    fn from(value: StaticMethod) -> Method {
        match value {
            StaticMethod::Connect => Method::Connect,
            StaticMethod::Delete => Method::Delete,
            StaticMethod::Get => Method::Get,
            StaticMethod::Head => Method::Head,
            StaticMethod::Options => Method::Options,
            StaticMethod::Post => Method::Post,
            StaticMethod::Put => Method::Put,
        }
    }
}

#[derive(Debug, Clone, Copy)]
pub enum Entry {
    Authority,
    /// :path   /
    Path,
    Header(&'static str, &'static str),
    Method(StaticMethod),
    SchemeHttp,
    SchemeHttps,
    StatusCode(StatusCode),
}

pub const TABLE: &[Entry; 99] = &[
    Entry::Authority,
    Entry::Path,
    Entry::Header("age", "0"),
    Entry::Header("content-disposition", ""),
    Entry::Header("content-length", "0"),
    Entry::Header("cookie", ""),
    Entry::Header("date", ""),
    Entry::Header("etag", ""),
    Entry::Header("if-modified-since", ""),
    Entry::Header("if-none-match", ""),
    Entry::Header("last-modified", ""),
    Entry::Header("link", ""),
    Entry::Header("location", ""),
    Entry::Header("referer", ""),
    Entry::Header("set-cookie", ""),
    Entry::Method(StaticMethod::Connect),
    Entry::Method(StaticMethod::Delete),
    Entry::Method(StaticMethod::Get),
    Entry::Method(StaticMethod::Head),
    Entry::Method(StaticMethod::Options),
    Entry::Method(StaticMethod::Post),
    Entry::Method(StaticMethod::Put),
    Entry::SchemeHttp,
    Entry::SchemeHttps,
    Entry::StatusCode(StatusCode::EarlyHints),
    Entry::StatusCode(StatusCode::Ok),
    Entry::StatusCode(StatusCode::NotModified),
    Entry::StatusCode(StatusCode::NotFound),
    Entry::StatusCode(StatusCode::ServiceUnavailable),
    Entry::Header("accept", "*/*"),
    Entry::Header("accept", "application/dns-message"),
    Entry::Header("accept-encoding", "gzip, deflate, br"),
    Entry::Header("accept-ranges", "bytes"),
    Entry::Header("access-control-allow-headers", "cache-control"),
    Entry::Header("access-control-allow-headers", "content-type"),
    Entry::Header("access-control-allow-origin", "*"),
    Entry::Header("cache-control", "max-age=0"),
    Entry::Header("cache-control", "max-age=2592000"),
    Entry::Header("cache-control", "max-age=604800"),
    Entry::Header("cache-control", "no-cache"),
    Entry::Header("cache-control", "no-store"),
    Entry::Header("cache-control", "public, max-age=31536000"),
    Entry::Header("content-encoding", "br"),
    Entry::Header("content-encoding", "gzip"),
    Entry::Header("content-type", "application/dns-message"),
    Entry::Header("content-type", "application/javascript"),
    Entry::Header("content-type", "application/json"),
    Entry::Header("content-type", "application/x-www-form-urlencoded"),
    Entry::Header("content-type", "image/gif"),
    Entry::Header("content-type", "image/jpeg"),
    Entry::Header("content-type", "image/png"),
    Entry::Header("content-type", "text/css"),
    Entry::Header("content-type", "text/html; charset=utf-8"),
    Entry::Header("content-type", "text/plain"),
    Entry::Header("content-type", "text/plain;charset=utf-8"),
    Entry::Header("range", "bytes=0-"),
    Entry::Header("strict-transport-security", "max-age=31536000"),
    Entry::Header("strict-transport-security", "max-age=31536000; includesubdomains"),
    Entry::Header("strict-transport-security", "max-age=31536000; includesubdomains; preload"),
    Entry::Header("vary", "accept-encoding"),
    Entry::Header("vary", "origin"),
    Entry::Header("x-content-type-options", "nosniff"),
    Entry::Header("x-xss-protection", "1; mode=block"),
    Entry::StatusCode(StatusCode::Continue),
    Entry::StatusCode(StatusCode::NoContent),
    Entry::StatusCode(StatusCode::PartialContent),
    Entry::StatusCode(StatusCode::Found),
    Entry::StatusCode(StatusCode::BadRequest),
    Entry::StatusCode(StatusCode::Forbidden),
    Entry::StatusCode(StatusCode::MisdirectedRequest),
    Entry::StatusCode(StatusCode::TooEarly),
    Entry::StatusCode(StatusCode::InternalServerError),
    Entry::Header("accept-language", ""),
    Entry::Header("access-control-allow-credentials", "FALSE"),
    Entry::Header("access-control-allow-credentials", "TRUE"),
    Entry::Header("access-control-allow-headers", "*"),
    Entry::Header("access-control-allow-methods", "get"),
    Entry::Header("access-control-allow-methods", "get, post, options"),
    Entry::Header("access-control-allow-methods", "options"),
    Entry::Header("access-control-expose-headers", "content-length"),
    Entry::Header("access-control-request-headers", "content-type"),
    Entry::Header("access-control-request-method", "get"),
    Entry::Header("access-control-request-method", "post"),
    Entry::Header("alt-svc", "clear"),
    Entry::Header("authorization", ""),
    Entry::Header("content-security-policy", "script-src 'none'; object-src 'none'; base-uri 'none'"),
    Entry::Header("early-data", "1"),
    Entry::Header("expect-ct", ""),
    Entry::Header("forwarded", ""),
    Entry::Header("if-range", ""),
    Entry::Header("origin", ""),
    Entry::Header("purpose", "prefetch"),
    Entry::Header("server", ""),
    Entry::Header("timing-allow-origin", "*"),
    Entry::Header("upgrade-insecure-requests", "1"),
    Entry::Header("user-agent", ""),
    Entry::Header("x-forwarded-for", ""),
    Entry::Header("x-frame-options", "deny"),
    Entry::Header("x-frame-options", "sameorigin"),
];
